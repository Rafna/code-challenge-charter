{"ast":null,"code":"var _jsxFileName = \"/Users/RAFNA/Documents/Rafna/MyProjects/Atom/Charter-interview/graphql-challenge/code-challenge-charter/src/UserViewer.js\";\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Table } from 'reactstrap';\nexport const GET_USER = gql`\n  query GetUser {\n    users {\n      id\n      name\n      username\n      email\n      phone\n      address {\n        street\n        suite\n        city\n        zipcode\n      }\n    }\n  }\n`;\nexport default (() => {\n  /*#__PURE__*/\n  React.createElement(Query, {\n    query: GET_USER,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }\n  }, ({\n    loading,\n    data\n  }) => !loading && /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, data.users.map(user => /*#__PURE__*/React.createElement(\"tr\", {\n    key: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, user.id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, user.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, user.username), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, user.email), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, user.phone), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, user.street), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, user.suite), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, user.city), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, user.zipcode))))));\n});","map":{"version":3,"sources":["/Users/RAFNA/Documents/Rafna/MyProjects/Atom/Charter-interview/graphql-challenge/code-challenge-charter/src/UserViewer.js"],"names":["React","gql","Query","Table","GET_USER","loading","data","users","map","user","id","name","username","email","phone","street","suite","city","zipcode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAGH,GAAK;;;;;;;;;;;;;;;;CAAtB;AAkBP,gBAAe,MAAM;AACnB;AAAA,sBAAC,KAAD;AAAO,IAAA,KAAK,EAAGG,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,KAAuB,CAACD,OAAD,iBACtB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeC,IAAI,iBAClB;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACC,EAAV,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAI,CAACE,IAAV,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,IAAI,CAACG,QAAV,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAI,CAACI,KAAV,CAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,CAACK,KAAV,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACM,MAAV,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,IAAI,CAACO,KAAV,CAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,IAAI,CAACQ,IAAV,CARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKR,IAAI,CAACS,OAAV,CATF,CADD,CADH,CADF,CAFF;AAqBD,CAtBD","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Table } from 'reactstrap';\n\nexport const GET_USER = gql `\n  query GetUser {\n    users {\n      id\n      name\n      username\n      email\n      phone\n      address {\n        street\n        suite\n        city\n        zipcode\n      }\n    }\n  }\n`;\n\nexport default () => {\n  <Query query={ GET_USER }>\n  {({ loading, data }) => !loading && (\n    <Table>\n      <tbody>\n        {data.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.id}</td>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>{user.email}</td>\n            <td>{user.phone}</td>\n            <td>{user.street}</td>\n            <td>{user.suite}</td>\n            <td>{user.city}</td>\n            <td>{user.zipcode}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )}\n  </Query>\n};\n"]},"metadata":{},"sourceType":"module"}